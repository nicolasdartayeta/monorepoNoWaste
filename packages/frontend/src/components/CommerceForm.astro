---
interface Props {
    id?: string; // Optional for editing
  name?: string; // Optional for editing
  description?: string; // Optional for editing
  address?: string; // Optional for editing
  city?: string; // Optional for editing
  owner_id?: string; // Optional for editing
  creation_date?: string; // Optional for updating
  active?: boolean; // Optional for updating
  logo?: string; // Optional for uploading logo
  image?: string; // Optional for uploading image
}

// Destructure props with default empty values
const { id,  name = '', description = '', address = '', city = '', owner_id = '', logo = '', image = '', creation_date, active } = Astro.props;


---
<form class="p-6 bg-white rounded-lg shadow-md">
    <label for="name" class="block font-bold mb-2">Nombre del Comercio:</label>
    <input
        type="text"
        name="name"
        id="name"
        value={name}
        placeholder="Ingresar nombre del comercio"
        class="border border-gray-300 rounded-md p-2 w-full mb-4"
        required
    />

    <label for="description" class="block font-bold mb-2">Descripcion:</label>
    <input
        type="text"
        name="description"
        id="description"
        value={description}
        placeholder="Agregar descripcion"
        class="border border-gray-300 rounded-md p-2 w-full mb-4"
        required
    />

    <label for="address" class="block font-bold mb-2">Direccion:</label>
    <input
        type="text"
        name="address"
        id="address"
        value={address}
        placeholder="Ingresar direccion"
        class="border border-gray-300 rounded-md p-2 w-full mb-4"
        required
    />

    <label for="city" class="block font-bold mb-2">Ciudad:</label>
    <input
        type="text"
        name="city"
        id="city"
        value={city}
        placeholder="Ingresar ciudad"
        class="border border-gray-300 rounded-md p-2 w-full mb-4"
        required
    />

    <label for="owner_id" class="block font-bold mb-2">Owner ID:</label>
    <input
        type="text"
        name="owner_id"
        id="owner_id"
        value={owner_id}
        placeholder="Cargar ID del dueño"
        class="border border-gray-300 rounded-md p-2 w-full mb-4"
        required
    />

    <label for="CommerceLogo" class="block font-bold mb-2">Logo:</label>
    <input
        type="file"
        name="CommerceLogo"
        id="CommerceLogo"
        class="border border-gray-300 rounded-md mb-4"
    />

    <label for="CommerceImg" class="block font-bold mb-2">Imagen:</label>
    <input
        type="file"
        name="CommerceImg"
        id="CommerceImg"
        class="border border-gray-300 rounded-md mb-4"
    />
    {id && (
        <>
            <label for="creation_date" class="block font-bold mb-2">Fecha de Creación:</label>
            <input
                type="date"
                name="creation_date"
                id="creation_date"
                value={creation_date}
                class="border border-gray-300 rounded-md p-2 w-full mb-4"
            />

            <label class="block font-bold mb-2">Activo:</label>
            <select
                name="active"
                id="active"
                class="border border-gray-300 rounded-md p-2 w-full mb-4"
            >
                <option value="true" selected={active}>True</option>
                <option value="false" selected={!active}>False</option>
            </select>
        </>
    )}
    <button
        type="submit"
        id="submit"
        class="bg-slate-500 py-2 px-4 text-white font-bold rounded-lg hover:bg-slate-600">
        { id ? 'Actualizar Comercio' : 'Agregar Comercio'}
    </button>
</form>
<script>
    import {app} from '@/lib/apiTreaty';
    
    
    document.querySelector('form')?.addEventListener('submit', async function (event) {
        event.preventDefault(); // Prevent default form submission
        const id = new URLSearchParams(window.location.search).get('id');;
        // Collect form data
        const name = String((document.getElementById('name') as HTMLInputElement).value);
        const description = String((document.getElementById('description') as HTMLInputElement).value);
        const address = String((document.getElementById('address') as HTMLInputElement).value);
        const city = String((document.getElementById('city') as HTMLInputElement).value);
        const owner_id = String((document.getElementById('owner_id') as HTMLInputElement).value);
        const creation_date = Date((document.getElementById('creation_date') as HTMLInputElement)?.value) || ''; // Default to empty string
        const active = (document.getElementById('active') as HTMLSelectElement)?.value === 'true'; // Convert to boolean

        const commerceData = {
            id,
            name,         // Collecting the value, not the element itself
            description,
            address,
            city,
            owner_id, // Ensure key matches the expected API field
            creation_date: new Date(),
            active 
        };
        console.log(commerceData);
        try {
            let response;

            if (id) {
                // If commerceId exists, update the existing commerce
                
                response = await app.commerce[id].put(commerceData);    //PROBLEMA CON DATE
            } else {
                // If no commerceId, create a new commerce entry
                response = await app.commerce.post(commerceData);
                //response = await app.commerce.index.post(commerceData);
            }
            console.log(response);
            if (response.status == 200) {
                console.log('Commerce successfully submitted:', response.data);
            }
        } catch (error) {
            console.error('Error submitting commerce:', error);
        }
    });
</script>